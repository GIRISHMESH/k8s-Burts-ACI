# =========================================================
# 1Ô∏è‚É£ Namespaces
# =========================================================
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-stack
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx

# =========================================================
# 2Ô∏è‚É£ Secrets & ConfigMaps
# =========================================================
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: nginx-stack
type: Opaque
stringData:
  root-password: rootpass123
  repl-password: replpass123
  app-password: applogin123
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: nginx-stack
data:
  mysql-url: mysql://mysql-0.mysql-headless.nginx-stack.svc.cluster.local:3306

# =========================================================
# 3Ô∏è‚É£ StorageClass
# =========================================================
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql-storage
provisioner: kubernetes.io/azure-disk
reclaimPolicy: Retain
allowVolumeExpansion: true
parameters:
  skuName: Premium_LRS
  kind: managed
volumeBindingMode: WaitForFirstConsumer

# =========================================================
# 4Ô∏è‚É£ MySQL StatefulSet (Worker Node Pool)
# =========================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: nginx-stack
spec:
  serviceName: mysql-headless
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      nodeSelector:
        kubernetes.io/os: linux
        agentpool: systemnodepool   # ensure MySQL runs on worker nodes
      containers:
        - name: mysql
          image: bitnami/mysql:8.0
          ports:
            - containerPort: 3306
              name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-password
            - name: MYSQL_REPLICATION_MODE
              value: "master"
            - name: MYSQL_REPLICATION_USER
              value: repl_user
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: repl-password
            - name: MYSQL_DATABASE
              value: appdb
            - name: MYSQL_USER
              value: appuser
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: app-password
          volumeMounts:
            - name: mysql-data
              mountPath: /bitnami/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

# =========================================================
# 5Ô∏è‚É£ MySQL Services
# =========================================================
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: nginx-stack
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: nginx-stack
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql

# =========================================================
# 6Ô∏è‚É£ NetworkPolicy
# =========================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-nginx-to-mysql
  namespace: nginx-stack
spec:
  podSelector:
    matchLabels:
      app: mysql
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: nginx-web
      ports:
        - protocol: TCP
          port: 3306
  policyTypes:
    - Ingress

# =========================================================
# 7Ô∏è‚É£ MySQL Init Job
# =========================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: init-mysql
  namespace: nginx-stack
spec:
  template:
    spec:
      containers:
        - name: mysql-init
          image: bitnami/mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-password
          command:
            - sh
            - -c
            - |
              echo "Waiting for MySQL cluster to be ready..."
              /opt/bitnami/scripts/mysql/wait-for-mysql.sh
              echo "MySQL is ready. Creating database..."
              mysql -h mysql-headless.nginx-stack.svc.cluster.local \
                    -u root -p"$MYSQL_ROOT_PASSWORD" \
                    -e "CREATE DATABASE IF NOT EXISTS appdb;"
      restartPolicy: OnFailure

# =========================================================
# 8Ô∏è‚É£ Nginx Deployment & Service (Virtual Node Pool)
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-web
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-web
  template:
    metadata:
      labels:
        app: nginx-web
    spec:
      nodeSelector:
        kubernetes.io/os: linux
        type: virtual-kubelet
      tolerations:
      - key: virtual-kubelet.io/provider
        operator: Exists
      - key: azure.com/aci
        effect: NoSchedule
      initContainers:
        - name: wait-for-mysql
          image: bitnami/mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-password
          command:
            - sh
            - -c
            - /opt/bitnami/scripts/mysql/wait-for-mysql.sh
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-web
  namespace: nginx-stack
spec:
  selector:
    app: nginx-web
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP

# =========================================================
# 9Ô∏è‚É£ App1 Deployment & Service (Virtual Node Pool)
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      nodeSelector:
        kubernetes.io/os: linux
        type: virtual-kubelet
      tolerations:
      - key: virtual-kubelet.io/provider
        operator: Exists
      - key: azure.com/aci
        effect: NoSchedule
      containers:
        - name: app1
          image: hashicorp/http-echo
          args: ["-text=Hello from App1"]
          ports:
            - containerPort: 5678
---
apiVersion: v1
kind: Service
metadata:
  name: app1
  namespace: nginx-stack
spec:
  selector:
    app: app1
  ports:
    - port: 80
      targetPort: 5678
  type: ClusterIP

# =========================================================
# üîü App2 Deployment & Service (Virtual Node Pool)
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      nodeSelector:
        kubernetes.io/os: linux
        type: virtual-kubelet
      tolerations:
      - key: virtual-kubelet.io/provider
        operator: Exists
      - key: azure.com/aci
        effect: NoSchedule
      containers:
        - name: app2
          image: hashicorp/http-echo
          args: ["-text=Hello from App2"]
          ports:
            - containerPort: 5678
---
apiVersion: v1
kind: Service
metadata:
  name: app2
  namespace: nginx-stack
spec:
  selector:
    app: app2
  ports:
    - port: 80
      targetPort: 5678
  type: ClusterIP
